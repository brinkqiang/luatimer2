cmake_minimum_required(VERSION 3.2)

PROJECT(luatimer)
INCLUDE(cmake/ModuleImport.cmake)
LIST(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
INCLUDE(cmake/ModuleCompileOptions.cmake)
ModuleSetCompileOptions()

SET(LUATIMER_VERSION_MAJOR "1")
SET(LUATIMER_VERSION_MINOR "0")
SET(LUATIMER_VERSION_PATCH "1")
SET(LUATIMER_VERSION "${LUATIMER_VERSION_MAJOR}.${LUATIMER_VERSION_MINOR}.${LUATIMER_VERSION_PATCH}")

MESSAGE(STATUS "VERSION: ${LUATIMER_VERSION}")

ADD_DEFINITIONS(-DUSE_LUATIMER)
ADD_DEFINITIONS(-DLUA_COMPAT_MODULE -DLUA_COMPAT_APIINTCASTS)
#ModuleImport("dmlog" "thirdparty/dmlog")

IF (WIN32)
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src/windows)
ENDIF(WIN32)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src/lua)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src/luatimer)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/test)

LINK_DIRECTORIES(${CMAKE_SOURCE_DIR}/bin)

SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/bin)

FILE(GLOB DMLUA_SOURCES
${CMAKE_CURRENT_SOURCE_DIR}/src/lua/*.cpp
${CMAKE_CURRENT_SOURCE_DIR}/src/lua/*.cc
${CMAKE_CURRENT_SOURCE_DIR}/src/lua/*.c
${CMAKE_CURRENT_SOURCE_DIR}/src/lua/*.hpp
${CMAKE_CURRENT_SOURCE_DIR}/src/lua/*.h
)

LIST(FILTER DMLUA_SOURCES EXCLUDE REGEX "lua.c$")
LIST(FILTER DMLUA_SOURCES EXCLUDE REGEX "luac.c$")
LIST(FILTER DMLUA_SOURCES EXCLUDE REGEX "wmain.c$")

FILE(GLOB LUA_SOURCES
${CMAKE_CURRENT_SOURCE_DIR}/src/lua/lua.c
)

FILE(GLOB LUATIMER_SOURCES
${CMAKE_CURRENT_SOURCE_DIR}/include/*.hpp
${CMAKE_CURRENT_SOURCE_DIR}/include/*.h

${CMAKE_CURRENT_SOURCE_DIR}/src/luatimer/*.cpp
${CMAKE_CURRENT_SOURCE_DIR}/src/luatimer/*.cc
${CMAKE_CURRENT_SOURCE_DIR}/src/luatimer/*.c
${CMAKE_CURRENT_SOURCE_DIR}/src/luatimer/*.hpp
${CMAKE_CURRENT_SOURCE_DIR}/src/luatimer/*.h
)

IF (WIN32)
    LIST(APPEND LUATIMER_SOURCES)
ENDIF(WIN32)

FILE(GLOB_RECURSE LUATIMERTEST_SOURCES
${CMAKE_CURRENT_SOURCE_DIR}/test/*.cpp
${CMAKE_CURRENT_SOURCE_DIR}/test/*.cc
${CMAKE_CURRENT_SOURCE_DIR}/test/*.c
${CMAKE_CURRENT_SOURCE_DIR}/test/*.hpp
${CMAKE_CURRENT_SOURCE_DIR}/test/*.h)

IF (WIN32)
    ADD_LIBRARY(lua53 SHARED ${DMLUA_SOURCES})

    ADD_LIBRARY(luatimer SHARED ${LUATIMER_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/src/luatimer/luatimer_module.def)
    TARGET_LINK_LIBRARIES(luatimer lua53)

    ADD_EXECUTABLE(lua ${LUA_SOURCES})
    TARGET_LINK_LIBRARIES(lua lua53)

    ADD_EXECUTABLE(luatimertest ${LUATIMERTEST_SOURCES})
    TARGET_LINK_LIBRARIES(luatimertest luatimer)
    
    SET_TARGET_PROPERTIES(lua53 PROPERTIES COMPILE_FLAGS "-DLUA_BUILD_AS_DLL -DLUA_CORE")
    SET_TARGET_PROPERTIES(luatimer PROPERTIES COMPILE_FLAGS "-DLUA_BUILD_AS_DLL -DLUA_LIB")
    SET_TARGET_PROPERTIES(luatimertest PROPERTIES COMPILE_FLAGS "-DLUA_BUILD_AS_DLL")
ELSEIF (APPLE)
    ADD_LIBRARY(lua53 SHARED ${DMLUA_SOURCES})

    ADD_LIBRARY(luatimer SHARED ${LUATIMER_SOURCES})
    TARGET_LINK_LIBRARIES(luatimer lua53)

    ADD_EXECUTABLE(lua ${LUA_SOURCES})
    TARGET_LINK_LIBRARIES(lua lua53)

    ADD_EXECUTABLE(luatimertest ${LUATIMERTEST_SOURCES})
    TARGET_LINK_LIBRARIES(luatimertest luatimer)
ELSEIF (UNIX)
    ADD_LIBRARY(lua53 SHARED ${DMLUA_SOURCES})

    ADD_LIBRARY(luatimer SHARED ${LUATIMER_SOURCES})
    TARGET_LINK_LIBRARIES(luatimer lua53)

    ADD_EXECUTABLE(lua ${LUA_SOURCES})
    TARGET_LINK_LIBRARIES(lua lua53 m)
    
    ADD_EXECUTABLE(luatimertest ${LUATIMERTEST_SOURCES})
    TARGET_LINK_LIBRARIES(luatimertest luatimer)
ENDIF ()

#ADD_CUSTOM_COMMAND(
#TARGET luatimertest
#PRE_BUILD
#COMMAND ${CMAKE_COMMAND} -E copy_if_different
#${CMAKE_CURRENT_SOURCE_DIR}/config/test.csv
#$<TARGET_FILE_DIR:luatimertest>
#)

#INSTALL(DIRECTORY include/ DESTINATION include)
#INSTALL(TARGETS luatimer
#        RUNTIME DESTINATION bin
#        LIBRARY DESTINATION lib
#        ARCHIVE DESTINATION lib)

#SET(LUATIMER_LIBS "luatimer")
#MARK_AS_ADVANCED(${LUATIMER_LIBS})
